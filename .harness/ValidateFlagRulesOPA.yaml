pipeline:
  name: Flag-OPA-Rules
  identifier: FlagOPARules
  projectIdentifier: FlagOPARules
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: ValidateFlags
        identifier: GrabFlagData
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - stepGroup:
                  name: GetFlagData
                  identifier: GetFlagData
                  steps:
                    - step:
                        type: Run
                        name: GetMetaFlags
                        identifier: GetMetaFlags
                        spec:
                          connectorRef: account.james_dockerhub
                          image: python:latest
                          shell: Python
                          command: |-
                            import json
                            import urllib.request
                            import os

                            # Read API key and Workspace ID from environment variables
                            API_KEY = os.getenv('SPLIT_API_KEY')
                            WORKSPACE_ID = os.getenv('SPLIT_WORKSPACE_ID')

                            # Check if API key and Workspace ID are provided
                            if not API_KEY or not WORKSPACE_ID:
                                raise ValueError("API key and Workspace ID must be set as environment variables.")

                            # Base URL for the API endpoint
                            BASE_URL = f"https://api.split.io/internal/api/v2/splits/ws/{WORKSPACE_ID}"

                            def get_feature_flags():
                                headers = {
                                    'Authorization': f'Bearer {API_KEY}',
                                    'Accept': 'application/json'
                                }
                                all_flags = []
                                offset = 0
                                limit = 20

                                while True:
                                    url = f"{BASE_URL}?limit={limit}&offset={offset}"

                                    request = urllib.request.Request(url, headers=headers)
                                    with urllib.request.urlopen(request) as response:
                                        data = json.loads(response.read().decode())

                                    # Extract feature flag names
                                    all_flags.extend(data['objects'])

                                    # Check if we have fetched all records
                                    total_count = data['totalCount']
                                    offset += limit
                                    if offset >= total_count:
                                        break

                                # Set environment variable with combined JSON
                                os.environ['FLAG_META_JSON'] = json.dumps(all_flags)
                                print("Environment variable FLAG_META_JSON set with combined JSON of all feature flags.")

                            # Call the function
                            get_feature_flags()
                          privileged: false
                          envVariables:
                            SPLIT_API_KEY: <+input>
                            SPLIT_WORKSPACE_ID: <+input>
                          outputVariables:
                            - name: FLAG_META_JSON
                              type: String
                              value: FLAG_META_JSON
                        enforce:
                          policySets:
                            - ValidateMetaFlagNames
                    - step:
                        type: Run
                        name: GetFlagDefinitions
                        identifier: GetFlagDefinitions
                        spec:
                          connectorRef: account.james_dockerhub
                          image: python:latest
                          shell: Python
                          command: |-
                            import json
                            import urllib.request
                            import os

                            # Read API key and Workspace ID from environment variables
                            API_KEY = os.getenv('SPLIT_API_KEY')
                            WORKSPACE_ID = os.getenv('SPLIT_WORKSPACE_ID')
                            PROD_ENV = os.getenv('PROD_ENVIRONMENT_ID')
                            STG_ENV = os.getenv('STG_ENVIRONMENT_ID')
                            # Check if API key and Workspace ID are provided
                            if not API_KEY or not WORKSPACE_ID:
                                raise ValueError("API key and Workspace ID must be set as environment variables.")

                            # Base URL for the API endpoint
                            BASE_URL = f"https://api.split.io/internal/api/v2/splits/ws/{WORKSPACE_ID}/environments/"

                            def get_feature_flags(envId, outputVar):
                                headers = {
                                    'Authorization': f'Bearer {API_KEY}',
                                    'Accept': 'application/json'
                                }
                                all_flags = []
                                offset = 0
                                limit = 20

                                while True:
                                    url = f"{BASE_URL}{envId}?limit={limit}&offset={offset}"
                                    print(url)
                                    request = urllib.request.Request(url, headers=headers)
                                    with urllib.request.urlopen(request) as response:
                                        data = json.loads(response.read().decode())

                                    # Extract feature flag names
                                    all_flags.extend(data['objects'])

                                    # Check if we have fetched all records
                                    total_count = data['totalCount']
                                    offset += limit
                                    if offset >= total_count:
                                        break

                                # Set environment variable with combined JSON
                                os.environ[outputVar] = json.dumps(all_flags)
                                print("Environment variable "+outputVar+" set with combined JSON of all feature flags.")

                            # Call the function
                            get_feature_flags(PROD_ENV, "STAGE_FLAG_DEFINITION_JSON")
                            get_feature_flags(STG_ENV, "PROD_FLAG_DEFINITION_JSON")
                          privileged: false
                          envVariables:
                            SPLIT_WORKSPACE_ID: <+input>
                            PROD_ENVIRONMENT_ID: <+input>
                            STG_ENVIRONMENT_ID: <+input>
                            SPLIT_API_KEY: <+input>
                          outputVariables:
                            - name: PROD_FLAG_DEFINITION_JSON
                              type: String
                              value: PROD_FLAG_DEFINITION_JSON
                            - name: STAGE_FLAG_DEFINITION_JSON
                              type: String
                              value: STAGE_FLAG_DEFINITION_JSON
                  stepGroupInfra:
                    type: KubernetesDirect
                    spec:
                      connectorRef: account.sesandboxdelegate
                      automountServiceAccountToken: false
              - parallel:
                  - step:
                      type: Policy
                      name: MetaFlagPolicies
                      identifier: MetaFlagPolicies
                      spec:
                        policySets:
                          - ValidateMetaFlagNames
                        type: Custom
                        policySpec:
                          payload: <+execution.steps.GetFlagData.steps.GetMetaFlags.output.outputVariables.FLAG_META_JSON>>
                      timeout: 10m
                      enforce:
                        policySets:
                          - ValidateMetaFlagNames
                      failureStrategies:
                        - onFailure:
                            errors:
                              - PolicyEvaluationFailure
                            action:
                              type: MarkAsFailure
                  - step:
                      type: Policy
                      name: FlagDefinitionPolicies
                      identifier: FlagDefinitionPolicies
                      spec:
                        policySets:
                          - ValiateFlagDefinitions
                        type: Custom
                        policySpec:
                          payload: |-
                            {
                              "prod": <+execution.steps.GetFlagData.steps.GetFlagDefinitions.output.outputVariables.PROD_FLAG_DEFINITION_JSON>,
                              "stage": <+execution.steps.GetFlagData.steps.GetFlagDefinitions.output.outputVariables.STAGE_FLAG_DEFINITION_JSON>
                            }
                      timeout: 10m
            rollbackSteps: []
          serviceDependencies: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - PolicyEvaluationFailure
              action:
                type: MarkAsFailure
